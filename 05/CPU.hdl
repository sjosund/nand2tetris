// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */



CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A Reg
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=outMuxAReg);
    Not(in=instruction[15], out=aInstruction);
    Or(a=aInstruction, b=instruction[5], out=writeA);
    ARegister(in=outMuxAReg, out=ARegOut, out[0..14]=addressM, load=writeA);
    
    // Input to the ALU
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=ALUIn);

    And(a=instruction[4], b=instruction[15], out=writeD);
    DRegister(in=ALUOut, out=DRegOut, load=writeD);
    
    ALU(x=DRegOut, y=ALUIn,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUOut, zr=ALUzr, ng=ALUng, out=outM);

    And(a=instruction[15], b=instruction[3], out=writeM);

    //Jumps
    Eq3(a[2]=false, a[1]=false, a[0]=true, b=instruction[0..2], out=JGTpins);
    Not(in=ALUng, out=notALUng);
    Not(in=ALUzr, out=notALUzr);
    And(a=notALUng, b=notALUzr, out=jgt);
    And(a=JGTpins, b=jgt, out=JGT);

    Eq3(a[2]=false, a[1]=true, a[0]=false, b=instruction[0..2], out=JEQpins);
    And(a=JEQpins, b=ALUzr, out=JEQ);
    
    Eq3(a[2]=false, a[1]=true, a[0]=true, b=instruction[0..2], out=JGEpins);
    Or(a=ALUzr, b=notALUng, out=ge);
    And(a=JGEpins, b=ge, out=JGE);
    
    Eq3(a[2]=true, a[1]=false, a[0]=false, b=instruction[0..2], out=JLTpins);
    And(a=JLTpins, b=ALUng, out=JLT);
    
    Eq3(a[2]=true, a[1]=false, a[0]=true, b=instruction[0..2], out=JNEpins);
    And(a=JNEpins, b=notALUzr, out=JNE);
    
    Eq3(a[2]=true, a[1]=true, a[0]=false, b=instruction[0..2], out=JLEpins);
    Or(a=ALUzr, b=ALUng, out=le);
    And(a=JLEpins, b=le, out=JLE);

    Eq3(a[2]=true, a[1]=true, a[0]=true, b=instruction[0..2], out=JMP);
    
    Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=jump); 

    // PC
    And(a=jump, b=instruction[15], out=loadA);
    Not(in=loadA, out=increment);
    PC(in=ARegOut, load=loadA, inc=increment, reset=reset, out[0..14]=pc);
}